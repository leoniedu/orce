[{"path":"https://leoniedu.github.io/orce/articles/munic_rmd.html","id":"cálculo-de-custo-da-coleta-presencial-nos-municípios","dir":"Articles","previous_headings":"","what":"Cálculo de custo da coleta presencial nos municípios","title":"Munic: Alocação dos municípios entre as Agências da SES-BA","text":"Premissas: Municípios na mesma microrregião ou região metropolitana não pagam diária, não ser que seja exigida pernoite. Distâncias maiores que 110 km pagam diária, mesmo se na jurisdição da agência. Coleta presencial dura 2 dias. Quando há pernoite, são pagas 1.5 diárias, e coleta é feita em 1 viagem(ns). Quando não há pernoite, são feitas 2 viagem(ns) (ida e volta). viagens tem origem nas agências e destino nos municípios de coleta. Importante: o custo de combustível pode ser reduzido significativamente fazendo “roteiros”. Diárias são calculadas para apenas um funcionário.","code":"ucs_now <- municipios_22%>%   sf::st_drop_geometry()%>%   filter(substr(municipio_codigo,1,2)==uf_now)%>%   left_join(agencias_bdo_mun%>%select(agencia_codigo, municipio_codigo))%>%   mutate(uc=municipio_codigo)%>%   ## com agências intramunicipais tem mais de uma agência associada a município   ## vamos deixar só a primeira (em ordem numérica)   group_by(municipio_codigo)%>%   arrange(agencia_codigo)%>%   slice(1)%>%   mutate(viagens=params$viagens, dias_coleta=params$dias_coleta) #> Joining with `by = join_by(municipio_codigo)`  res <- alocar_ucs(ucs=ucs_now,                    agencias=agencias_now,                    ## treinamento na agência                   agencias_treinamento = '292740800',                    distancias_agencias = distancias_agencias,                    distancias_ucs =                      distancias_ucs,                    custo_fixo=0,                   dias_treinamento=0,                   dist_diaria_km = params$dist_diaria_km,                   adicional_troca_jurisdicao = params$adicional_troca_jurisdicao)  ll_municipios <- pontos_municipios_sede%>%   #rename(lat=municipio_sede_lat, lon=municipio_sede_lon)%>%   left_join(municipios_22%>%sf::st_drop_geometry()) #> Joining with `by = join_by(municipio_codigo)`  resultado_ucs <- bind_rows(   res$resultado_ucs_otimo%>%mutate(plano= \"otimo\"),   res$resultado_ucs_jurisdicao%>%mutate(plano= \"jurisdição\"))%>%   group_by(uc)%>%   mutate(mudanca=length(unique(agencia_codigo))>1) j <- res$resultado_ucs_jurisdicao%>%   left_join(agencias_bdo%>%sf::st_drop_geometry(), by=\"agencia_codigo\")%>%   left_join(assistencias_ba)%>%   group_by(assistencia_nome, agencia_nome)%>%   mutate(municipios=1)%>%   summarise(across(c(municipios, total_diarias, custo_diarias, distancia_total_km, custo_combustivel), sum)) #> Joining with `by = join_by(agencia_codigo)` #> `summarise()` has grouped output by 'assistencia_nome'. You can override using #> the `.groups` argument. gt(j%>%ungroup, groupname_col = 'assistencia_nome', rowname_col='agencia_nome')%>%   gt::summary_rows(fns = list(fn='sum', label=\"Total da Assistência\"), fmt=~fmt_nums(.))%>%   fmt_nums()%>%   gt::cols_label_with(fn=\"nome_sigba_i\")%>%   gt::grand_summary_rows(fns = list(fn='sum', label=\"Total da Superintendência\")                          , fmt = ~fmt_nums(.)) toexport <- res$resultado_ucs_jurisdicao%>%   rename(municipio_codigo=uc)%>%   left_join(agencias_bdo%>%sf::st_drop_geometry(), by = join_by(agencia_codigo))%>%   left_join(municipios_22%>%select(municipio_codigo, municipio_nome), by = join_by(municipio_codigo))%>%   left_join(assistencias_ba, by = join_by(agencia_codigo))%>%   transmute(     assistencia_nome,     agencia_codigo, agencia_nome,     municipio_nome, municipio_codigo,             distancia_km, duracao_horas, diaria, meia_diaria, trechos, total_diarias, custo_diarias, distancia_total_km, custo_combustivel, custo_horas_viagem, custo_deslocamento) export_dir <- file.path(here::here(\"vignettes\", \"articles\", \"munic\")) dir.create(export_dir, recursive = TRUE, showWarnings = FALSE) export_path <- file.path(export_dir,paste0(\"munic_\", params$uf_codigo, \"_\", format(Sys.time(), \"%Y%m%d_%H\"), \".xlsx\")) toexport_l <- lapply(toexport%>%split(.$assistencia_nome), function(x) janitor::remove_constant(x)) sigba::excel(toexport_l, filename = export_path) #> Loading required package: openxlsx"},{"path":"https://leoniedu.github.io/orce/articles/munic_rmd.html","id":"dados-por-município","dir":"Articles","previous_headings":"","what":"Dados por município","title":"Munic: Alocação dos municípios entre as Agências da SES-BA","text":"Disponíveis arquivo munic_29_20240906_17.xlsx.","code":""},{"path":"https://leoniedu.github.io/orce/articles/munic_rmd.html","id":"opcional-sugestões-de-alteração-de-agência-de-coleta-","dir":"Articles","previous_headings":"","what":"Opcional: Sugestões de alteração de agência de coleta.","title":"Munic: Alocação dos municípios entre as Agências da SES-BA","text":"O custo de deslocamento inclui diárias, combustível, e custo adicional por hora de viagem correspondente R$10 por hora. Só são listadas trocas que economizariam mínimo R$300 custo de deslocamento para o município. Observação: Se houver interesse em alguma dessas trocas de agência de coleta será necessário recalcular os custos apresentados anteriormente.","code":"mudancas <- ll_municipios%>%   sf::st_drop_geometry()%>%   inner_join(resultado_ucs%>%filter(mudanca), by=c(\"municipio_codigo\"=\"uc\"))%>%   left_join(agencias_bdo%>%select(agencia_codigo,                                    agencia_nome,                                   agencia_lat,                                   agencia_lon))%>%   mutate(uc_lat=municipio_sede_lat, uc_lon=municipio_sede_lon) #> Joining with `by = join_by(agencia_codigo)`    gt(   mudancas%>%     select(agencia_nome, municipio_nome, distancia_km, custo_deslocamento, plano)%>%     tidyr::pivot_wider(names_from = c(\"plano\"), id_cols = c(\"municipio_nome\"), values_from=c(\"agencia_nome\", \"distancia_km\", \"custo_deslocamento\"))#%>%arrange(agencia_nome_otimo)   )%>%   fmt_nums()%>%   gt::cols_label_with(fn=\"nome_sigba_i\") if (nrow(mudancas)>0) {   mudancas_l <- mudancas%>%group_split(municipio_nome)   for (i in seq_along(mudancas_l)) {     dnow <- mudancas_l[[i]]%>%       arrange(custo_deslocamento)%>%       mutate(title=glue::glue(\"{municipio_nome}:\\n.  de {agencia_nome[2]}\\n   para {agencia_nome[1]}\"),     subtitle=glue::glue(\"{agencia_nome}: {round(distancia_km)} km (R$ {round(custo_deslocamento)})\"))     p <- map_uc_agencias(dnow) +       geom_label(aes(x=municipio_sede_lon, y=municipio_sede_lat, label=municipio_nome), data=dnow[1,], size=3) +       geom_label(aes(x=agencia_lon, y=agencia_lat, label=agencia_nome), data=dnow, size=3) +     theme_minimal() +       labs(title = dnow$title[1], caption = paste(dnow$subtitle, collapse='\\n'), x=\"\",y=\"\")+       guides(color=\"none\")     print(p)   } }"},{"path":"https://leoniedu.github.io/orce/articles/munic_rmd.html","id":"apêndice-técnico","dir":"Articles","previous_headings":"","what":"Apêndice Técnico","title":"Munic: Alocação dos municípios entre as Agências da SES-BA","text":"O que temos é um problema de alocação ótima de Unidades Primárias de Amostragem (UPAs) agências, com o objetivo de minimizar os custos totais, incluindo custos de deslocamento e custos fixos associados cada agência. O modelo de otimização é baseado extensamente em “Warehouse Location Problem”, de Dirk Schumacher, https://dirkschumacher.github.io/ompr/articles/problem-warehouse-location.html. Trata-se de um problema comum em logística que busca determinar melhor localização para instalações de modo minimizar custos. Tendo localização das UPAs e localização das agências, tarefa é decidir que agências incluir/treinar/contratar, e que UPAs vão ser alocadas quais agências. Ou seja, temos que decidir, ao mesmo tempo, (1) que agências treinar, e (2) distribuição de UPAs por agência. Começamos com um conjunto de UPAs U={1…n}U = \\{1 \\ldots n\\} e um conjunto de possíveis agências ={1…m}= \\{1 \\ldots m\\} que poderiam ser treinadas. Além disso, temos uma função de custo que nos fornece o custo de deslocamento de uma agência até uma UPA. Ademais, há um custo fixo (incluindo custo de treinamento, entre outros) associado cada agência, caso ela seja selecionada para coleta. Agências com número pequeno de UPAs podem ser inviáveis. Agências interior com número grande de UPAs podem também ser inviáveis. solução tem que ter mínimo min_upas=enomáximo e máximo   por agência treinada. Observação, ao se permitir coleta “semi-centralizada”, não há limite para número de UPAs nas agências listadas. Para modelar esta situação, utilizamos duas variáveis de decisão: xi,jx_{,j}: variável binária que é 1 se UPA ii é alocada à agência jj, e 0 caso contrário. yjy_j: variável binária que é 1 se agência jj é selecionada para realizar coleta, e 0 caso contrário. $$ \\begin{equation*} \\begin{array}{ll@{}ll} \\text{minimizar}  & \\displaystyle\\sum\\limits_{=1}^{n}\\sum\\limits_{j=1}^{m}\\operatorname{custo\\_deslocamento}_{,j} \\cdot x_{, j} +  \\sum\\limits_{j=1}^{m}\\operatorname{custo\\_fixo}_{j} \\cdot y_{j}& &\\\\ \\text{satisfazendo} & \\displaystyle\\sum\\limits_{j=1}^{m}   x_{, j} = 1  & =1 ,\\ldots, n&\\\\                   & \\displaystyle x_{, j} \\leq y_j,  & =1 ,\\ldots, n & j=1 ,\\ldots, m&\\\\                  &                                                x_{,j} \\\\{0,1\\} &=1 ,\\ldots, n, & j=1 ,\\ldots, m \\\\                  &                                                y_{j} \\\\{0,1\\} &j=1 ,\\ldots, m& \\\\                  &                                                \\operatorname{(opcional)} \\sum\\limits_{=1}^{n}{x}_{,j} >= ( \\operatorname{min\\_upas} \\cdot y_{j})  & j=1 ,\\ldots, m&                  \\\\                  &                                                \\operatorname{(opcional)} \\sum\\limits_{=1}^{n}{x}_{,j} <=  \\operatorname{max\\_upas}_{j}  & j=1 ,\\ldots, m& \\end{array} \\end{equation*} $$","code":""},{"path":"https://leoniedu.github.io/orce/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eduardo Leoni. Author, maintainer.","code":""},{"path":"https://leoniedu.github.io/orce/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Leoni E (2024). orce: Package (One Line, Title Case). R package version 0.0.0.9000, https://leoniedu.github.io/orce/.","code":"@Manual{,   title = {orce: What the Package Does (One Line, Title Case)},   author = {Eduardo Leoni},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://leoniedu.github.io/orce/}, }"},{"path":"https://leoniedu.github.io/orce/index.html","id":"orce-otimização-da-rede-de-coleta-estatística","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"orce package R package designed optimize allocation primary sampling units (PSUs), census tracts health facilities, IBGE (Brazilian Institute Geography Statistics) agencies. allocation process crucial efficient cost-effective data collection large-scale surveys censuses. package addresses several challenges inherent process, including: Routing Geocoding: Determining optimal routes PSUs agencies requires accurate location data. orce package leverages CNEFE (National Register Addresses Statistical Purposes) database obtain precise coordinates PSU, prioritizing high-density areas within census tracts ensure accessibility representativeness. ponto_setor_densidade function aids identifying representative locations. Allocation Optimization: core orce package allocation optimization algorithm. employs mixed-integer linear programming minimize overall cost data collection, considering factors like travel distances, travel time, fixed agency costs. alocar_upas function implements optimization, allowing flexible constraints agency capacity location preferences. Cost Calculation: Accurately estimating cost data collection involves just distances travel time. orce package incorporates knowledge administrative boundaries determine whether “diárias” (travel allowances) applicable. nuanced cost calculation ensures optimization results reflect true financial implications different allocation scenarios. Flexibility Adaptability: orce package offers various customization options accommodate specific needs different surveys data collection efforts. Users can define parameters fuel costs, hourly travel costs, vehicle fuel efficiency, agency-specific constraints. package also supports sequential allocation across multiple time periods (e.g., quarters), allowing dynamic adjustments allocation plan. summary, orce package provides powerful versatile solution optimizing allocation PSUs IBGE agencies. addressing challenges related routing, geocoding, allocation optimization, cost calculation, enables efficient cost-effective data collection strategies. flexibility adaptability make valuable tool wide range survey census operations Brazil.","code":""},{"path":"https://leoniedu.github.io/orce/reference/add_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Coordinates to an sf Object — add_coordinates","title":"Add Coordinates to an sf Object — add_coordinates","text":"function extracts coordinates sf object's geometry adds new columns object.","code":""},{"path":"https://leoniedu.github.io/orce/reference/add_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Coordinates to an sf Object — add_coordinates","text":"","code":"add_coordinates(sf_object, lon = \"lon\", lat = \"lat\")"},{"path":"https://leoniedu.github.io/orce/reference/add_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Coordinates to an sf Object — add_coordinates","text":"sf_object sf object containing spatial features. lon string specifying name longitude column. Defaults \"lon\". lat string specifying name latitude column. Defaults \"lat\".","code":""},{"path":"https://leoniedu.github.io/orce/reference/add_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Coordinates to an sf Object — add_coordinates","text":"sf object added coordinate columns.","code":""},{"path":"https://leoniedu.github.io/orce/reference/add_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Coordinates to an sf Object — add_coordinates","text":"","code":"# Load necessary packages library(sf) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # Create a simple sf object points <- data.frame(   name = c(\"A\", \"B\"),   geometry = c(\"POINT(1 2)\", \"POINT(3 4)\") ) %>%   st_as_sf(wkt = \"geometry\")  # Add coordinates using default column names points_with_coords <- add_coordinates(points)  # Add coordinates using custom column names points_with_coords_custom <- add_coordinates(points, lon = \"longitude\", lat = \"latitude\")"},{"path":"https://leoniedu.github.io/orce/reference/alocar_ucs.html","id":null,"dir":"Reference","previous_headings":"","what":"Alocação Otimizada de Unidades de Coleta (UCs) a Agências — alocar_ucs","title":"Alocação Otimizada de Unidades de Coleta (UCs) a Agências — alocar_ucs","text":"Esta função realiza alocação otimizada de Unidades de Coleta (UCs) agências, com o objetivo de minimizar os custos totais de deslocamento e operação. alocação leva em consideração restrições de capacidade das agências, custos de deslocamento (combustível, tempo de viagem e diárias), custos fixos das agências e custos de treinamento.","code":""},{"path":"https://leoniedu.github.io/orce/reference/alocar_ucs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alocação Otimizada de Unidades de Coleta (UCs) a Agências — alocar_ucs","text":"","code":"alocar_ucs(   ucs,   agencias = NULL,   custo_litro_combustivel = 6,   custo_hora_viagem = 10,   kml = 10,   valor_diaria = 335,   custo_fixo = 500,   dias_treinamento = 5.5,   dist_diaria_km = 100,   agencias_treinadas = NULL,   agencias_treinamento = NULL,   distancias_ucs,   distancias_agencias,   min_uc_agencia = 1,   max_uc_agencia = NULL,   semi_centralizada = NULL,   adicional_troca_jurisdicao = 0,   resultado_completo = FALSE )"},{"path":"https://leoniedu.github.io/orce/reference/alocar_ucs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alocação Otimizada de Unidades de Coleta (UCs) a Agências — alocar_ucs","text":"ucs Um tibble ou data.frame contendo informações sobre UCs, incluindo: uc: Código único da UC. agencia_codigo: Código da agência à qual UC está atualmente alocada. dias_coleta: Número de dias de coleta na UC. viagens: Número de viagens necessárias para coleta na UC. agencias Um tibble ou data.frame contendo informações sobre agências selecionáveis, incluindo: agencia_codigo: Código único da agência. custo_litro_combustivel Custo combustível por litro (em R$). Padrão: 6. custo_hora_viagem Custo de cada hora de viagem (em R$). Padrão: 10. kml Consumo médio de combustível veículo (em km/l). Padrão: 10. valor_diaria Valor da diária para deslocamentos (em R$). Padrão: 335. custo_fixo Custo fixo mensal da agência, como salário entrevistador, custo de monitoramento, etc. (em R$). Padrão: 500. dias_treinamento Número de dias/diárias para treinamento. Padrão: 5.5 dist_diaria_km Distância mínima (em km) para que seja paga uma diária, caso de UC na jurisdição da agência. caso da UC fora da jurisdição da agência, quando distância menor que dist_diaria_km, se paga meia diária, calculada como 1/2 valor das diárias inteiras. Padrão 100 agencias_treinadas (Opcional) Um vetor de caracteres com os códigos das agências que já foram treinadas e não terão custo de treinamento. O custo dos APMs contratados nessas agências ainda será incluído plano de otimização. Padrão: NULL. agencias_treinamento Código da(s) agência(s) onde o treinamento será realizado. distancias_ucs Um tibble ou data.frame com distâncias entre UCs e agências, incluindo: uc: Código da UC. agencia_codigo: Código da agência. distancia_km: Distância em quilômetros entre UC e agência. duracao_horas: Duração da viagem em horas entre UC e agência diaria_municipio: Indica se é necessária uma diária para deslocamento entre UC e agência, considerando o município da UC distancias_agencias Um tibble ou data.frame com distâncias entre agências, incluindo: agencia_codigo_orig: Código da agência de origem agencia_codigo_dest: Código da agência de destino distancia_km: Distância em quilômetros entre agência de origem e de destino duracao_horas: Duração da viagem em horas entre agência de origem e de destino min_uc_agencia Número mínimo de UCs por agência. Só válido para agências não treinadas. Padrão: 1. max_uc_agencia Número máximo de UCs por agência. Padrão: NULL (ilimitado). semi_centralizada (Opcional) Um vetor de caracteres com os códigos das agências que não terão limite máximo de UCs alocadas. Padrão: NULL. adicional_troca_jurisdicao Custo adicional quando há troca de agência de coleta. Padrão 0 resultado_completo (Opcional) Um valor lógico indicando se deve ser retornado um resultado mais completo, incluindo informações sobre todas combinações de UCs e agências. Padrão: FALSE.","code":""},{"path":"https://leoniedu.github.io/orce/reference/alocar_ucs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alocação Otimizada de Unidades de Coleta (UCs) a Agências — alocar_ucs","text":"Uma lista contendo: resultado_ucs_otimo: Um tibble com UCs e suas alocações otimizadas, incluindo custos de deslocamento. resultado_ucs_jurisdicao: Um tibble com UCs e suas alocações originais (jurisdição), incluindo custos de deslocamento. resultado_agencias_otimo: Um tibble com agências e suas alocações otimizadas, incluindo custos fixos, custos de deslocamento e número de UCs alocadas. resultado_agencias_jurisdicao: Um tibble com agências e suas alocações originais (jurisdição), incluindo custos fixos, custos de deslocamento e número de UCs alocadas. ucs_agencias_todas (opcional): Um tibble com todas combinações de UCs e agências, incluindo distâncias, custos e informações sobre diárias (retornado apenas se resultado_completo TRUE).","code":""},{"path":"https://leoniedu.github.io/orce/reference/calcula_distancias.html","id":null,"dir":"Reference","previous_headings":"","what":"Calcula Distâncias Entre Origens e Destinos — calcula_distancias","title":"Calcula Distâncias Entre Origens e Destinos — calcula_distancias","text":"Esta função calcula distância e duração entre conjuntos de pontos de origem e destino usando o serviço OSRM.","code":""},{"path":"https://leoniedu.github.io/orce/reference/calcula_distancias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calcula Distâncias Entre Origens e Destinos — calcula_distancias","text":"","code":"calcula_distancias(destinos, origens, nmax = 2000)"},{"path":"https://leoniedu.github.io/orce/reference/calcula_distancias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calcula Distâncias Entre Origens e Destinos — calcula_distancias","text":"destinos Um objeto sf representando os pontos de destino. origens Um objeto sf representando os pontos de origem.","code":""},{"path":"https://leoniedu.github.io/orce/reference/calcula_distancias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calcula Distâncias Entre Origens e Destinos — calcula_distancias","text":"Um data frame com distâncias (em quilômetros) e durações (em horas) entre cada par de origem e destino.","code":""},{"path":"https://leoniedu.github.io/orce/reference/map_uc_agencias.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapeia Unidades de Coleta (UCs) e Agências — map_uc_agencias","title":"Mapeia Unidades de Coleta (UCs) e Agências — map_uc_agencias","text":"Esta função cria um mapa exibindo localização das unidades de coleta (UCs) e agências. Ela utiliza o pacote 'ggmap' para obter um mapa de uma fonte especificada (por exemplo, Google Maps) e sobrepõe UCs e agências nele.","code":""},{"path":"https://leoniedu.github.io/orce/reference/map_uc_agencias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapeia Unidades de Coleta (UCs) e Agências — map_uc_agencias","text":"","code":"map_uc_agencias(   data,   f = 0.05,   source = \"google\",   maptype = \"roadmap\",   zoom = \"auto\" )"},{"path":"https://leoniedu.github.io/orce/reference/map_uc_agencias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mapeia Unidades de Coleta (UCs) e Agências — map_uc_agencias","text":"data Um data frame contendo coordenadas das UCs e agências. Deve possuir colunas chamadas 'uc_lat', 'uc_lon', 'agencia_lat' e 'agencia_lon'. f Um valor numérico especificando fração pela qual expandir caixa delimitadora em torno das UCs e agências. O padrão é 0.05. source Uma string de caracteres especificando fonte mapa. O padrão é \"google\". maptype Uma string de caracteres especificando o tipo de mapa. O padrão é \"roadmap\". zoom Um número inteiro ou string \"auto\" especificando o nível de zoom. Se \"auto\", o nível de zoom é calculado automaticamente para ajustar todas UCs e agências.","code":""},{"path":"https://leoniedu.github.io/orce/reference/map_uc_agencias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mapeia Unidades de Coleta (UCs) e Agências — map_uc_agencias","text":"Um objeto ggplot representando o mapa com UCs e agências sobrepostas.","code":""},{"path":"https://leoniedu.github.io/orce/reference/to_title_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to Title Case with Locale-Specific Exceptions — to_title_case","title":"Convert to Title Case with Locale-Specific Exceptions — to_title_case","text":"function converts string title case, respecting locale-specific exceptions words remain lowercase. combines functionality stringi::stri_trans_totitle customizable exception lists different locales.","code":""},{"path":"https://leoniedu.github.io/orce/reference/to_title_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to Title Case with Locale-Specific Exceptions — to_title_case","text":"","code":"to_title_case(string, locale = \"en\", exceptions = NULL)"},{"path":"https://leoniedu.github.io/orce/reference/to_title_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to Title Case with Locale-Specific Exceptions — to_title_case","text":"string input string converted. locale string specifying locale (e.g., \"en\", \"pt_BR\", \"es\", \"fr\"). Defaults \"en\". exception_lists named list names locales values vectors exception words kept lowercase. Defaults list containing exceptions English (\"en\"), Portuguese (\"pt_BR\"), Spanish (\"es\"), French (\"fr\").","code":""},{"path":"https://leoniedu.github.io/orce/reference/to_title_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to Title Case with Locale-Specific Exceptions — to_title_case","text":"input string converted title case locale-specific exceptions applied.","code":""}]
